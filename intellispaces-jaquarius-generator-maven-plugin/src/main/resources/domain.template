package {{$packageName}};

{{for importedClass : $importedClasses}}
import {{$importedClass}};
{{end}}

@Domain("{{$id}}")
{{when $isDataset}}
@Dataset
{{end}}
public interface {{$simpleName}}{{when $typeParams.isNotEmpty()}}<{{for typeParam : $typeParams}}{{$typeParam}}{{when $typeParam.isNotLast()}}, {{end}}{{end}}>{{end}}{{when $parents.isNotEmpty()}} extends {{for parent : $parents}}{{$parent["name"]}}{{$parent["typeParams"]}}{{when $parent.isNotLast()}}, {{end}}{{end}}{{end}} {

{{for channel : $channels}}
{{when eachOf($channel["name"].isEmpty(), $channel["allowedTraverse"].isEmpty()).isTrue()}}
  @Channel("{{$channel["id"]}}")
{{else}}
  @Channel(
    value = "{{$channel["id"]}}"
    {{when $channel["name"].isNotEmpty()}}, name = "{{$channel["name"]}}" {{end}}
    {{when $channel["allowedTraverse"].isNotEmpty()}}, allowedTraverse = {{$channel["allowedTraverse"]}} {{end}}
  )
{{end}}
{{when $channel["unmovable"]}}
  @Unmovable
{{end}}
{{when $channel["movable"]}}
  @Movable
{{end}}
  {{when $channel["typeParams"].isNotEmpty()}}<{{for typeParam : $channel["typeParams"]}}{{$typeParam}}{{end}}> {{end}}{{$channel["target"]}} {{$channel["alias"]}}({{for qualifier : $channel["qualifiers"]}}{{$qualifier["type"]}} {{$qualifier["alias"]}}{{when $qualifier.isNotLast()}}, {{end}}{{end}});

{{end}}
}
